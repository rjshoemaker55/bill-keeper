{"version":3,"sources":["queries/queries.js","pages/Login/Login.js","components/Navbar/Navbar.js","components/BillRow/BillRow.js","pages/Home/Home.js","App.js","index.js"],"names":["loginQuery","gql","getUserQuery","getBillQuery","addUserMutation","addBillMutation","updateBillMutation","deleteBillMutation","Login","props","useState","login","setLogin","username","setUsername","password","setPassword","name","setName","errorMsg","setErrorMsg","console","log","useLazyQuery","onError","err","onCompleted","data","history","push","pathname","state","loginUser","useMutation","addUser","registerUser","id","value","onChange","e","target","type","placeholder","className","autoComplete","required","onClick","variables","Navbar","uname","to","BillRow","billname","amount","category","duedate","deleteBill","updateBill","newBillName","setNewBillName","newAmount","setNewAmount","newCategory","setNewCategory","newDueDate","setNewDueDate","buttonType","setButtonType","editField","field","preventDefault","Number","Home","user","setUser","bills","setBills","newBillCategory","setNewBillCategory","newBillAmount","setNewBillAmount","newBillDueDate","setNewBillDueDate","updateType","setUpdateType","rows","sortedBills","sort","a","b","toLowerCase","localeCompare","location","loading","useQuery","userId","error","res","updateBillState","findBill","billId","addBill","filter","bill","findIndex","billToUpdate","newBillArray","align","map","key","parseInt","client","ApolloClient","uri","App","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9342c255.chunk.js","sourcesContent":["import { gql } from 'apollo-boost';\n\n// QUERY: Authenticate user and return ID\nconst loginQuery = gql`\n  query($username: String!, $password: String!) {\n    loginUser(username: $username, password: $password) {\n      id\n    }\n  }\n`;\n\n// QUERY: Get all users\nconst getUsersQuery = gql`\n  {\n    users {\n      id\n      uname\n      username\n    }\n  }\n`;\n\n// QUERY: Get single user by id\nconst getUserQuery = gql`\n  query($userId: Int!) {\n    user(userId: $userId) {\n      id\n      uname\n      username\n      bills {\n        id\n        billname\n        amount\n        duedate\n        category\n      }\n    }\n  }\n`;\n\n// QUERY: Get single bill\nconst getBillQuery = gql`\n  query($billId: Int!) {\n    bill(billId: $billId) {\n      id\n      billname\n      amount\n      category\n      duedate\n    }\n  }\n`;\n\n// MUTATION: Add new user\nconst addUserMutation = gql`\n  mutation($name: String!, $username: String!, $password: String!) {\n    addUser(uname: $name, username: $username, upassword: $password) {\n      id\n    }\n  }\n`;\n\n// MUTATION: Add new bill\nconst addBillMutation = gql`\n  mutation(\n    $billname: String!\n    $amount: Int!\n    $duedate: Int!\n    $category: String\n    $user: Int!\n  ) {\n    addBill(\n      billname: $billname\n      amount: $amount\n      duedate: $duedate\n      category: $category\n      user: $user\n    ) {\n      id\n    }\n  }\n`;\n\n// MUTATION: Update bill\nconst updateBillMutation = gql`\n  mutation(\n    $id: Int!\n    $newBillName: String\n    $newCategory: String\n    $newAmount: Int\n    $newDueDate: Int\n  ) {\n    updateBill(\n      id: $id\n      newBillName: $newBillName\n      newCategory: $newCategory\n      newAmount: $newAmount\n      newDueDate: $newDueDate\n    ) {\n      id\n    }\n  }\n`;\n\n// MUTATION: Delete bill\nconst deleteBillMutation = gql`\n  mutation($id: Int!) {\n    deleteBill(id: $id) {\n      id\n    }\n  }\n`;\n\nexport {\n  loginQuery,\n  addUserMutation,\n  getUsersQuery,\n  getUserQuery,\n  getBillQuery,\n  deleteBillMutation,\n  updateBillMutation,\n  addBillMutation\n};\n","import React, { useState } from 'react';\nimport { useLazyQuery, useMutation } from '@apollo/react-hooks';\nimport { loginQuery, addUserMutation } from '../../queries/queries';\nimport './login.css';\n\nconst Login = props => {\n  const [login, setLogin] = useState(true);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [name, setName] = useState('');\n  const [errorMsg, setErrorMsg] = useState(false);\n\n  console.log(username, password);\n\n  const [loginUser] = useLazyQuery(loginQuery, {\n    onError: err => {\n      setUsername('');\n      setPassword('');\n      setErrorMsg(true);\n    },\n    onCompleted: data => {\n      setErrorMsg(false);\n      props.history.push({\n        pathname: '/home',\n        state: data.loginUser\n      });\n    }\n  });\n\n  const [registerUser] = useMutation(addUserMutation, {\n    onCompleted: data => {\n      props.history.push({\n        pathname: '/home',\n        state: data.addUser\n      });\n    }\n  });\n\n  return (\n    <div id='login-wrapper'>\n      <div id='login-header-wrapper'>\n        <div id='login-header'>Bill Keeper.</div>\n        <div id='login-subheader'>Login or Register:</div>\n      </div>\n      {errorMsg && <div id='login-error'>Incorrect username or password.</div>}\n      {!login && (\n        <input\n          value={name}\n          onChange={e => setName(e.target.value)}\n          type='text'\n          placeholder='Name'\n          className='login-field'\n          autoComplete='new-password'\n          required\n        />\n      )}\n      <input\n        value={username}\n        onChange={e => setUsername(e.target.value)}\n        type='text'\n        placeholder='Username'\n        className='login-field'\n        autoComplete='new-password'\n        required\n      />\n      <input\n        value={password}\n        onChange={e => setPassword(e.target.value)}\n        type='password'\n        placeholder='Password'\n        className='login-field'\n        autoComplete='new-password'\n        required\n      />\n      <button\n        id='register-login-button'\n        onClick={e => {\n          login\n            ? loginUser({\n                variables: {\n                  username,\n                  password\n                }\n              })\n            : registerUser({\n                variables: {\n                  name: name,\n                  username: username,\n                  password: password\n                }\n              });\n        }}\n      >\n        {login ? 'Login' : 'Register'}\n      </button>\n      <div id='register-login-switch' onClick={() => setLogin(!login)}>\n        {login ? 'Register' : 'Login'}\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './Navbar.css';\n\nconst Navbar = props => {\n  return (\n    <div id='navbar-wrapper'>\n      <div id='navbar-left-display' className='navbar-item'>\n        <div id='logged-in-display'>{props.uname}</div>\n      </div>\n      <div id='navbar-center-display' className='navbar-item'>\n        <div id='navbar-title'>Bill Keeper.</div>\n      </div>\n      <div id='navbar-right-display' className='navbar-item'>\n        <div id='logout-button'>\n          <Link to='/' id='logout-text'>\n            Logout\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Navbar;\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/react-hooks';\nimport { updateBillMutation } from '../../queries/queries';\n\nimport './BillRow.css';\n\nconst BillRow = props => {\n  const {\n    id,\n    className,\n    billname,\n    amount,\n    category,\n    duedate,\n    deleteBill,\n    updateBill\n  } = props;\n\n  const [newBillName, setNewBillName] = useState(billname);\n  const [newAmount, setNewAmount] = useState(amount);\n  const [newCategory, setNewCategory] = useState(category);\n  const [newDueDate, setNewDueDate] = useState(duedate);\n  const [buttonType, setButtonType] = useState('table-delete-button');\n\n  const editField = (e, field) => {\n    e.preventDefault();\n    setButtonType('table-update-button');\n    switch (field) {\n      case 'billname':\n        setNewBillName(e.target.value);\n        break;\n      case 'category':\n        setNewCategory(e.target.value);\n        break;\n      case 'amount':\n        setNewAmount(Number(e.target.value));\n        break;\n      case 'duedate':\n        setNewDueDate(Number(e.target.value));\n        break;\n    }\n  };\n\n  const handleUpdate = () => {\n    if (buttonType == 'table-delete-button') {\n      deleteBill();\n    } else {\n      updateBill({\n        variables: {\n          id,\n          newBillName,\n          newCategory,\n          newAmount,\n          newDueDate\n        }\n      });\n      setButtonType('table-delete-button');\n    }\n  };\n\n  const handleRevert = () => {\n    setButtonType('table-delete-button');\n    setNewBillName(billname);\n    setNewAmount(amount);\n    setNewCategory(category);\n    setNewDueDate(duedate);\n  };\n\n  return (\n    <tr className={className}>\n      <td>\n        <input\n          className='bill-item'\n          value={newBillName}\n          onChange={e => editField(e, 'billname')}\n        />\n      </td>\n      <td>\n        {category ? (\n          <input\n            className='bill-item'\n            value={newCategory}\n            onChange={e => editField(e, 'category')}\n          />\n        ) : (\n          'None'\n        )}\n      </td>\n      <td>\n        <div className='dollar'>\n          <input\n            className='bill-item centered'\n            value={newAmount}\n            type='number'\n            onChange={e => editField(e, 'amount')}\n          />\n        </div>\n      </td>\n      <td>\n        <input\n          className='bill-item centered'\n          value={newDueDate}\n          type='number'\n          onChange={e => editField(e, 'duedate')}\n        />\n      </td>\n      <td className='centered'>\n        <button id={buttonType} className='table-button' onClick={handleUpdate}>\n          {buttonType == 'table-delete-button' ? 'X' : '✓'}\n        </button>\n        {buttonType == 'table-update-button' && (\n          <button\n            id='table-revert-button'\n            className='table-button'\n            onClick={handleRevert}\n          >\n            ⟲\n          </button>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nexport default BillRow;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation, useQuery, useLazyQuery } from '@apollo/react-hooks';\nimport {\n  deleteBillMutation,\n  getUserQuery,\n  addBillMutation,\n  getBillQuery,\n  updateBillMutation\n} from '../../queries/queries';\nimport Navbar from '../../components/Navbar/Navbar';\nimport BillRow from '../../components/BillRow/BillRow';\nimport './home.css';\n\nconst Home = props => {\n  const [user, setUser] = useState({});\n  const [bills, setBills] = useState([]);\n  const [newBillName, setNewBillName] = useState('');\n  const [newBillCategory, setNewBillCategory] = useState('');\n  const [newBillAmount, setNewBillAmount] = useState('');\n  const [newBillDueDate, setNewBillDueDate] = useState('');\n  const [updateType, setUpdateType] = useState('');\n\n  let rows = 0;\n\n  // Sorts bills in alphabetical order\n  let sortedBills = bills.sort((a, b) => {\n    return a.billname.toLowerCase().localeCompare(b.billname.toLowerCase());\n  });\n\n  // Destructures userid from login page\n  const { id } = props.history.location.state;\n\n  // Brings in user data/bill data from id and sets state to match\n  const { loading } = useQuery(getUserQuery, {\n    variables: {\n      userId: id\n    },\n    onError: error => console.log(`getUserQuery Error: ${error}`),\n    onCompleted: data => {\n      setUser(data.user);\n      setBills(data.user.bills);\n    }\n  });\n\n  // Gets bill data by id\n  const [findBill] = useLazyQuery(getBillQuery, {\n    onError: error => console.log(`getBill Error: ${error}`),\n    onCompleted: res => updateBillState(updateType, res)\n  });\n\n  // Adds a bill, then calls findBill to update state\n  const [addBill] = useMutation(addBillMutation, {\n    onError: error => console.log(`addBill Error: ${error}`),\n    onCompleted: res => {\n      setUpdateType('add');\n      findBill({\n        variables: { billId: res.addBill.id }\n      });\n    }\n  });\n\n  // Updates a bill\n  const [updateBill] = useMutation(updateBillMutation, {\n    onError: err => console.log(`updateBill error: ${err}`),\n    onCompleted: res => {\n      setUpdateType('update');\n      findBill({\n        variables: { billId: res.updateBill.id }\n      });\n    }\n  });\n\n  // Deletes bill by id, then updates state\n  const [deleteBill] = useMutation(deleteBillMutation, {\n    onError: error => console.log(`deleteBill Error: ${error}`),\n    onCompleted: res => {\n      setUpdateType('delete');\n      updateBillState('delete', res);\n    }\n  });\n\n  // Takes the update type and data, and updates the client state\n  const updateBillState = async (updateType, data) => {\n    switch (updateType) {\n      case 'delete':\n        setBills(bills.filter(bill => bill.id !== data.deleteBill.id));\n        break;\n      case 'add':\n        setBills([...bills, data.bill]);\n        setNewBillName('');\n        setNewBillCategory('');\n        setNewBillDueDate('');\n        setNewBillAmount('');\n        break;\n      case 'update':\n        let billToUpdate = await bills.findIndex(\n          bill => bill.id == data.bill.id\n        );\n        let newBillArray = [...bills];\n        newBillArray[billToUpdate] = data.bill;\n        setBills(newBillArray);\n        break;\n    }\n  };\n\n  return loading ? (\n    <>\n      <Navbar uname='Loading' />\n      <h2>Loading...</h2>\n    </>\n  ) : (\n    <>\n      <Navbar uname={user.uname} />\n      <div id='home-wrapper'>\n        <div id='instructions'>Click on bill data to edit.</div>\n        <div id='scroll-instructions'>\n          Scroll to see all data on smaller screens.\n        </div>\n        <div id='table-scroll'>\n          <table align='center' id='bill-table'>\n            <thead>\n              <tr id='table-header-row'>\n                <th>Bill Name</th>\n                <th>Category</th>\n                <th className='centered'>Amount</th>\n                <th className='centered'>Due Date</th>\n                <th id='table-delete-column'></th>\n              </tr>\n            </thead>\n            <tbody>\n              {!loading &&\n                sortedBills.map(bill => {\n                  rows++;\n                  return (\n                    <BillRow\n                      key={bill.id}\n                      id={bill.id}\n                      className={!(rows % 2) ? 'green-row' : 'reg-row'}\n                      billname={bill.billname}\n                      amount={bill.amount}\n                      category={bill.category}\n                      duedate={bill.duedate}\n                      deleteBill={() => {\n                        deleteBill({ variables: { id: bill.id } });\n                      }}\n                      updateBill={updateBill}\n                    />\n                  );\n                })}\n\n              <tr id='new-bill-row'>\n                <td>\n                  <input\n                    className='new-bill-field'\n                    value={newBillName}\n                    placeholder='New Bill'\n                    onChange={e => setNewBillName(e.target.value)}\n                  />\n                </td>\n                <td>\n                  <input\n                    className='new-bill-field'\n                    value={newBillCategory}\n                    placeholder='Category'\n                    onChange={e => setNewBillCategory(e.target.value)}\n                  />\n                </td>\n                <td className='centered'>\n                  <input\n                    className='new-bill-field centered'\n                    value={newBillAmount}\n                    type='number'\n                    placeholder='Amount'\n                    onChange={e => setNewBillAmount(parseInt(e.target.value))}\n                  />\n                </td>\n                <td className='centered'>\n                  <input\n                    className='new-bill-field centered'\n                    value={newBillDueDate}\n                    placeholder='Due Date'\n                    type='number'\n                    onChange={e => setNewBillDueDate(parseInt(e.target.value))}\n                  />\n                </td>\n                <td className='centered'>\n                  <button\n                    id='add-bill-button'\n                    className='table-button'\n                    onClick={() => {\n                      addBill({\n                        variables: {\n                          billname: newBillName,\n                          amount: newBillAmount,\n                          category: newBillCategory,\n                          duedate: newBillDueDate,\n                          user: id\n                        }\n                      });\n                    }}\n                  >\n                    +\n                  </button>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport Login from './pages/Login/Login';\nimport Home from './pages/Home/Home';\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <Route exact path='/' component={Login} />\n        <Route exact path='/home' component={Home} />\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}